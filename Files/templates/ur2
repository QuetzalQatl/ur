<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html" charset="utf-8"/>
    <title>The Royal Game Of Ür</title>
    <!--- Link to the last version of BabylonJS --->
    <script src="/babylon.js"></script>
    <style>
        html, body {
            overflow: hidden;
            width   : 100%;
            height  : 100%;
            margin  : 0;
            padding : 0;
        }

        #renderCanvas {
            width   : 100%;
            height  : 100%;
            touch-action: none;
        }
	}
    .box {
		width:98%;
		height:38%;
		position:fixed;
		margin-left:1%; 
		margin-top:1%; 
		top:31%;
		left:0px;
	}
	
	.button {
		-webkit-transition-duration: 0.1s; /* For Safari */
		transition-duration: 0.1s;
		background-color: #504040; 
		border: 2px solid #101010;
		color: #FFEEEE;
		text-align: center;
		font-size: 42px;
		width: 98%;
	}
	
	.button:hover {
		background-color: #908080; 
		color: white;
	}

	.text {
		background-color: #FFFEDD; 
		border: 1px solid #89258c; 
		color: #312533;
		text-align: center;
		font-size: 42px;
		width: 98%;
	}
	
	input:-moz-read-only { /* For Firefox */
		background-color: #F4F4ED;
	}
	
	input:read-only {
		background-color: #F4F4ED;
	}
    </style>
</head>
<body>
    <canvas id="renderCanvas" style="display: none;"></canvas>
 <div id="setupDialogue" style="display: none;">
 <table class="box">
    <tr>
        <td>Nr of Black Pieces: </td><td><input id="blackStones" class="text" readonly="true" value="7"></input></td>
    </tr>
    <tr>
        <td>Nr of White Pieces: </td><td><input id="whiteStones" class="text" readonly="true" value="7"></input></td>
    </tr>
    <tr>
        <td>Overshoot or No Overshoot?</td><td><button class="button" type="button" id="allowOvershoot">Overshoot</button></td>
    </tr>
    <tr>
        <td>Allow going back at then end?</td><td><button class="button" type="button" id="allowBackwards">No AllowBack</button></td>
    </tr>
    <tr>
        <td>Route to take?</td><td><button class="button" type="button" id="route">LLLURRRRRRRDLL</button></td>
    </tr>
    <tr>
        <td>How to determine who starts?</td><td><button class="button" type="button" id="startRule">Roll</button></td>
    </tr>
    <tr>
        <td>Admin has color</td><td><button class="button" type="button" id="adminColor">Black</button></td>
    </tr>
    <tr>
        <td></td><td><button class="button" type="button" id="buttonStartGame">Start Game</button></td>
    </tr>
  </table>
 </div>    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
    <script>
window.addEventListener('DOMContentLoaded', function(){
	var socket = io.connect('/urlobbie');
	var state;
	var boardCreated=false;
	%%GAMEVARS%%
	
	//  get the canvas DOM element
	var canvas = document.getElementById('renderCanvas');
	
	// load the 3D engine
	var engine = new BABYLON.Engine(canvas, true);
	
	// createScene function that creates and return the scene
	var createScene = function () {
	    var scene = new BABYLON.Scene(engine);
	
	    //Create a light
	    var light = new BABYLON.PointLight("Omni", new BABYLON.Vector3(1000, 1000, -1000), scene);
		
	    //Create an Arc Rotate Camera - aimed negative z this time
	    var camera = new BABYLON.ArcRotateCamera("Camera",0, 0, 0, BABYLON.Vector3.Zero(), scene);
		camera.setPosition(new BABYLON.Vector3(0, 0, -950));
	    camera.attachControl(canvas, true);
	
	    //Creation of a repeated textured material
		var materialWhite= new BABYLON.StandardMaterial("materialWhite", scene);
		materialWhite.diffuseTexture = new BABYLON.Texture("/white.png", scene);
	    materialWhite.emissiveColor = new BABYLON.Color3(0.1, 0.1, 0.1);
	    materialWhite.backFaceCulling = true;
		
		var materialBlack= new BABYLON.StandardMaterial("materialBlack", scene);
		materialBlack.diffuseTexture = new BABYLON.Texture("/black.png", scene);
	    materialBlack.emissiveColor = new BABYLON.Color3(0.1, 0.1, 0.1);
	    materialBlack.backFaceCulling = true;
		
		var materialWood0= new BABYLON.StandardMaterial("materialWood0", scene);
	    materialWood0.diffuseTexture = new BABYLON.Texture("/wood0.png", scene);
		materialWood0.emissiveColor = new BABYLON.Color3(0.2, 0.2, 0.2);
	    materialWood0.backFaceCulling = true;
	    
	    var materialWood1= new BABYLON.StandardMaterial("materialWood1", scene);
	    materialWood1.diffuseTexture = new BABYLON.Texture("/wood1.png", scene);
		materialWood1.emissiveColor = new BABYLON.Color3(0.2, 0.2, 0.2);
	    materialWood1.backFaceCulling = true;
	    
	    var materialWood2= new BABYLON.StandardMaterial("materialWood2", scene);
	    materialWood2.diffuseTexture = new BABYLON.Texture("/wood2.png", scene);
		materialWood2.emissiveColor = new BABYLON.Color3(0.2, 0.2, 0.2);
	    materialWood2.backFaceCulling = true;
	    
	    var materialWood3= new BABYLON.StandardMaterial("materialWood3", scene);
	    materialWood3.diffuseTexture = new BABYLON.Texture("/wood3.png", scene);
		materialWood3.emissiveColor = new BABYLON.Color3(0.2, 0.2, 0.2);
	    materialWood3.backFaceCulling = true;
	    
	    var materialWood4= new BABYLON.StandardMaterial("materialWood4", scene);
	    materialWood4.diffuseTexture = new BABYLON.Texture("/wood4.png", scene);
		materialWood4.emissiveColor = new BABYLON.Color3(0.2, 0.2, 0.2);
	    materialWood4.backFaceCulling = true;
	    
	    var materialWood5= new BABYLON.StandardMaterial("materialWood5", scene);
	    materialWood5.diffuseTexture = new BABYLON.Texture("/wood5.png", scene);
		materialWood5.emissiveColor = new BABYLON.Color3(0.2, 0.2, 0.2);
	    materialWood5.backFaceCulling = true;
	    
	    var materialWood6= new BABYLON.StandardMaterial("materialWood6", scene);
	    materialWood6.diffuseTexture = new BABYLON.Texture("/wood6.png", scene);
		materialWood6.emissiveColor = new BABYLON.Color3(0.2, 0.2, 0.2);
	    materialWood6.backFaceCulling = true;
	    
	    var materialWood7= new BABYLON.StandardMaterial("materialWood7", scene);
	    materialWood7.diffuseTexture = new BABYLON.Texture("/wood7.png", scene);
		materialWood7.emissiveColor = new BABYLON.Color3(0.2, 0.2, 0.2);
	    materialWood7.backFaceCulling = true;
	    
	    var materialStone= new BABYLON.StandardMaterial("materialStone", scene);
	    materialStone.diffuseTexture = new BABYLON.Texture("/stone.png", scene);
		materialStone.emissiveColor = new BABYLON.Color3(0.2, 0.2, 0.2);
	    materialStone.backFaceCulling = true;
		
		var materialDiceGreen= new BABYLON.StandardMaterial("materialDiceGreen", scene);
	    materialDiceGreen.diffuseTexture = new BABYLON.Texture("/stone.png", scene);
		materialDiceGreen.emissiveColor = new BABYLON.Color3(0, 0.6, 0);
	    materialDiceGreen.backFaceCulling = true;
	
		var materialDiceRed= new BABYLON.StandardMaterial("materialDiceRed", scene);
	    materialDiceRed.diffuseTexture = new BABYLON.Texture("/stone.png", scene);
		materialDiceRed.emissiveColor = new BABYLON.Color3(0.6, 0, 0);
	    materialDiceRed.backFaceCulling = true;
		
		var materialRose= new BABYLON.StandardMaterial("materialRose", scene);
	    materialRose.diffuseTexture = new BABYLON.Texture("/rose.png", scene);
		materialRose.emissiveColor = new BABYLON.Color3(1, 0, 0);
	    materialRose.backFaceCulling = true;
		
		var materialNone= new BABYLON.StandardMaterial("materialNone", scene);
		materialNone.wireframe=true;
	    materialNone.backFaceCulling = true;
		materialNone.alpha = 0.0;
		
	    var x;
	    var y;
	    var z;
	    
	    x=0;
	    y=0;
	    z=0;
	    var counter=0;
	    var woodtype=[0,5,4,1,2,7,6,3,  1,2,3,4,5,0,7,6,   2,5,6,7,4,3,0,1]
		for (var i = 0, len = state['board'].length; i < len; i++) {
			var newx=(x-3.5)*120;
			var newy=(y-1.0)*120;
			var newz=(z-.5)*120;
			var block = BABYLON.Mesh.CreateBox("block"+i.toString(), 120, scene);
			if (state['board'][i]=='R'){
				block.material = materialRose;
			} 
			if (state['board'][i]=='S'){
				type=woodtype[counter];
					block.material = materialWood0;
				}
				if (type==1){
					block.material = materialWood1;
				}
				if (type==2){
					block.material = materialWood2;
				}
				if (type==3){
					block.material = materialWood3;
				}
				if (type==4){
					block.material = materialWood4;
				}
				if (type==5){
					block.material = materialWood5;
				}
				if (type==6){
					block.material = materialWood6;
				}
				if (type==7){
					block.material = materialWood7;
				}
			} 
			if (state['board'][i]=='0'){
				block.material = materialNone;
			} 
			block.position.x=newx;
			block.position.y=newy;
			block.position.z=newz;
	
			x=x+1;
			if (x>7){
				x=0;
				y=y+1;
			}
			counter=counter+1;
			
		} 
	    
	    
		x=0;
	    y=0;
	    z=0;
	    
		for (var i = 0, len = onBoard.length; i < len; i++) {
			var newx=(x-3.5)*120;
			var newy=(y-1.0)*120;
			var newz=-120;
			var block = BABYLON.Mesh.CreateSphere("Board"+i.toString(), 80, 80, scene);	
			if (onBoard[i]=='W'){
				block.material = materialWhite;
			} 
			if (onBoard[i]=='B'){
				block.material = materialBlack;
			} 
			if (onBoard[i]=='0'){
				block.material = materialNone;
			} 
			block.position.x=newx;
			block.position.y=newy;
			block.position.z=newz;
			block.rotate(BABYLON.Axis.X, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Y, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Z, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			
			x=x+1;
			if (x>7){
				x=0;
				y=y+1;
			}
		}   
		
		
		x=0;
	    y=0;
	    z=0;
	    
		for (var i = 0, len = topPlayerIn.length; i < len; i++) {
			var newx=x*82-480;
			var newy=235;
			var newz=-25;
			var block = BABYLON.Mesh.CreateSphere("TopIn"+i.toString(), 80, 80, scene);	
			if (topPlayerIn[i]=='B'){
				block.material = materialBlack;
			} 
			if (topPlayerIn[i]=='W'){
				block.material = materialWhite;
			} 
			if (topPlayerIn[i]=='0'){
				block.material = materialNone;
			} 
			
			block.position.x=newx;
			block.position.y=newy;
			block.position.z=newz;
			block.rotate(BABYLON.Axis.X, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Y, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Z, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			
			x=x+1;
		} 
		x=0;
	    y=0;
	    z=0;
	    
		for (var i = 0, len = bottomPlayerIn.length; i < len; i++) {
			var newx=x*82-480;
			var newy=-235;
			var newz=-25;
			var block = BABYLON.Mesh.CreateSphere("BottomIn"+i.toString(), 80, 80, scene);	
	
			if (bottomPlayerIn[i]=='B'){
				block.material = materialBlack;
			} 
			if (bottomPlayerIn[i]=='W'){
				block.material = materialWhite;
			} 
			if (bottomPlayerIn[i]=='0'){
				block.material = materialNone;
			} 
			block.position.x=newx;
			block.position.y=newy;
			block.position.z=newz;
			block.rotate(BABYLON.Axis.X, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Y, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Z, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			x=x+1;
		}  
		x=0;
	    y=0;
	    z=0;
	    
		for (var i = 0, len = topPlayerOut.length; i < len; i++) {
			var newx=480-x*82;
			var newy=235;
			var newz=-25;
			var block = BABYLON.Mesh.CreateSphere("TopOut"+i.toString(), 80, 80, scene);	
	
			if (topPlayerOut[i]=='B'){
				block.material = materialBlack;
			} 
			if (topPlayerOut[i]=='W'){
				block.material = materialWhite;
			} 
			if (topPlayerOut[i]=='0'){
				block.material = materialNone;
			} 
			block.position.x=newx;
			block.position.y=newy;
			block.position.z=newz;
			block.rotate(BABYLON.Axis.X, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Y, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Z, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			x=x+1;
		} 
		x=0;
	    y=0;
	    z=0;
	    
		for (var i = 0, len = bottomPlayerOut.length; i < len; i++) {
			var newx=480-x*82;
			var newy=-235;
			var newz=-25;
			var block = BABYLON.Mesh.CreateSphere("BottomOut"+i.toString(), 80, 80, scene);	
	
			if (bottomPlayerOut[i]=='B'){
				block.material = materialBlack;
			} 
			if (bottomPlayerOut[i]=='W'){
				block.material = materialWhite;
			} 
			if (bottomPlayerOut[i]=='0'){
				block.material = materialNone;
			} 
			block.position.x=newx;
			block.position.y=newy;
			block.position.z=newz;
			block.rotate(BABYLON.Axis.X, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Y, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Z, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			x=x+1;
		}  
		
		x=0;
	    y=0;
	    z=0;
	    
		for (var i = 0, len = bottomDice.length; i < len; i++) {
			var newx=(x-2)*120;
			var newy=-335;
			var newz=-25;
			var block = BABYLON.MeshBuilder.CreatePolyhedron("BottomDice"+i.toString(), {type: 0, size: 30}, scene);
	
			if (bottomDice[i]=='0'){
				block.material = materialDiceRed;
			} 
			if (bottomDice[i]=='1'){
				block.material = materialDiceGreen;
			} 
			if (bottomDice[i]=='2'){
				block.material = materialStone;
			}
			if (bottomDice[i]=='3'){
				block.material = materialNone;
			} 
			
			block.position.x=newx;
			block.position.y=newy;
			block.position.z=newz;
			block.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Z, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			x=x+1;
		} 
		
		x=0;
	    y=0;
	    z=0;
	    
		for (var i = 0, len = topDice.length; i < len; i++) {
			var newx=(x-1)*120;
			var newy=335;
			var newz=-25;
			var block = BABYLON.MeshBuilder.CreatePolyhedron("TopDice"+i.toString(), {type: 0, size: 30}, scene);
	
			if (topDice[i]=='0'){
				block.material = materialDiceRed;
			} 
			if (topDice[i]=='1'){
				block.material = materialDiceGreen;
			} 
			if (topDice[i]=='2'){
				block.material = materialStone;
			} 
			if (topDice[i]=='3'){
				block.material = materialNone;
			} 
			
			block.position.x=newx;
			block.position.y=newy;
			block.position.z=newz;
			block.rotate(BABYLON.Axis.Y, Math.PI, BABYLON.Space.LOCAL);
			block.rotate(BABYLON.Axis.Z, Math.PI* Math.random() * 2.0, BABYLON.Space.LOCAL);
			x=x+1;
		} 
	    return scene;
	};

	// call the createScene function
	var scene = createScene();
	
	// run the render loop
	engine.runRenderLoop(function(){
	    scene.render();
	});
	
	// the canvas/window resize event handler
	window.addEventListener('resize', function(){
	    engine.resize();
	});
	
	
	
	// Socket events:
	socket.on('connect', function() {
	    console.log('socket.id: ', socket.id, ' connected');
	    socket.emit('getSettings');
	    socket.emit('getState');
	});
	
	socket.on('connect_error', (error) => {
	  console.log('Could not connect to socket');
	  console.log(error);
	});
	
	socket.on('connect_timeout', (timeout) => {
	  console.log('Socket connection timed out');
	  console.log(timeout);
	});
	
	socket.on('error', (error) => {
	  console.log('Socket connection error');
	  console.log(error);
	});
	
	socket.on('disconnect', (reason) => {
	  console.log('socket.id: ', socket.id, ' disconnected');
	  console.log(reason);
	});
	
	socket.on('gamePaused', function() {
		console.log('Game Paused');
	});	
	
	socket.on('newSetting', function(what, to) {
		console.log(what, to);	
		if (what=='whiteStones' || what=='blackStones'){
			document.getElementById(what).value =to;
		}else{
			document.getElementById(what).textContent =to;
		}
	});
	
	socket.on('newState', function(newBoard) {
		console.log('server says newState', newBoard);
		state=newBoard
		if (state['gameState']=='setupAdmin'){
			console.log('setupAdmin');
			document.getElementById('setupDialogue').style.display = "block";
			document.getElementById('blackStones').readOnly = false;
			document.getElementById('whiteStones').readOnly  = false;
			document.getElementById('allowOvershoot').addEventListener("mouseup", function (evt) {
				console.log('allowOvershoot');
				if (document.getElementById('allowOvershoot').textContent =="Overshoot"){
					document.getElementById('allowOvershoot').textContent ="No Overshoot";
				}else{
					document.getElementById('allowOvershoot').textContent ="Overshoot";
				}
				socket.emit('updateSetting', 'allowOvershoot', document.getElementById('allowOvershoot').textContent);
    		});
    		document.getElementById('allowBackwards').addEventListener("mouseup", function (evt) {
    			console.log('allowBackwards');
				if (document.getElementById('allowBackwards').textContent =="No AllowBack"){
					document.getElementById('allowBackwards').textContent ="AllowBack";
				}else{
					document.getElementById('allowBackwards').textContent ="No AllowBack";
				}
				socket.emit('updateSetting', 'allowBackwards', document.getElementById('allowBackwards').textContent);
    		});
    		document.getElementById('route').addEventListener("mouseup", function (evt) {
    			console.log('route');
				if (document.getElementById('route').textContent =="LLLURRRRRRRDLL"){
					document.getElementById('route').textContent ="LLLUURDRURDRRRURDDDL";
				}else{
					document.getElementById('route').textContent ="LLLURRRRRRRDLL";
				}
				socket.emit('updateSetting', 'route', document.getElementById('route').textContent);
    		});
    		document.getElementById('adminColor').addEventListener("mouseup", function (evt) {
    			console.log('adminColor');
				if (document.getElementById('adminColor').textContent =="Black"){
					document.getElementById('adminColor').textContent ="White";
				}else{
					document.getElementById('adminColor').textContent ="Black";
				}
				socket.emit('updateSetting', 'adminColor', document.getElementById('adminColor').textContent);
    		});
    		document.getElementById('blackStones').addEventListener("keyup", function (evt) {
    			console.log('blackStones');
    			socket.emit('updateSetting', 'blackStones', document.getElementById('blackStones').value);
    		});
    		document.getElementById('whiteStones').addEventListener("keyup", function (evt) {
    			console.log('whiteStones');
    			socket.emit('updateSetting', 'whiteStones', document.getElementById('whiteStones').value);
    		});
    		document.getElementById('startRule').addEventListener("mouseup", function (evt) {
    			console.log('startRule');
				var newValue='';
				if (document.getElementById('startRule').textContent =="Roll"){
					newValue="Random";
				}
				if (document.getElementById('startRule').textContent =="Random"){
					newValue="Black";
				}
				if (document.getElementById('startRule').textContent =="Black"){
					newValue="White";
				}
				if (document.getElementById('startRule').textContent =="White"){
					newValue="Roll";
				}
				document.getElementById('startRule').textContent =newValue;
				socket.emit('updateSetting', 'startRule', document.getElementById('startRule').textContent);
    		});
    		document.getElementById('buttonStartGame').addEventListener("mouseup", function (evt) {
    			console.log('buttonStartGame');
				socket.emit('startGame');
    		});
		}
		
		if (state['gameState']=='setupPlayer'){
			console.log('setupPlayer');
			document.getElementById('setupDialogue').style.display = "block";
			document.getElementById('renderCanvas').style.display = "none";
		}
		
		if (state['gameState']=='setupObserver'){
			console.log('setupObserver');
			document.getElementById('setupDialogue').style.display = "block";
			document.getElementById('renderCanvas').style.display = "none";
		}
		
		if (state['gameState']=='rollForStart'){
			console.log('rollForStart');
			document.getElementById('setupDialogue').style.display = "none";
			document.getElementById('renderCanvas').style.display = "block";
			engine.resize();
		}
		
		if (state['gameState']=='adminsTurn'){
			console.log('adminsTurn');		
			document.getElementById('setupDialogue').style.display = "none";
			document.getElementById('renderCanvas').style.display = "block";
			engine.resize();
		}
		
		if (state['gameState']=='playersTurn'){
			console.log('playersTurn');		
			document.getElementById('setupDialogue').style.display = "none";
			document.getElementById('renderCanvas').style.display = "block";
			engine.resize();
		}
		
		if (state['gameState']=='paused'){
			console.log('paused');		
			document.getElementById('setupDialogue').style.display = "none";
			document.getElementById('renderCanvas').style.display = "block";
			engine.resize();
		}
	});
});
    </script>
</body>
</html>